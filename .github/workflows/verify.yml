name: verify-places

on:
  schedule:
    - cron: "0 3 * * *"   # daily at 03:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write          # needed to push changes / create PR
  pull-requests: write

jobs:
  run-verify:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      # lockfileやpackage.jsonを汚さないように --no-save を付与
      - name: Install deps (no-save)
        run: npm i --no-save --no-package-lock node-fetch@3 jsdom@24

      - name: List public JSON targets
        run: |
          echo "== JSON files in public (raw) =="
          find public -type f -name "*.json" -print | sort || true
          echo
          echo "== scan.mjs target logic =="
          node -e 'const fs=require("fs"),p=require("path");
          function collect(d){if(!fs.existsSync(d))return[];let r=[];
            for(const f of fs.readdirSync(d)){const q=p.join(d,f);const s=fs.statSync(q);
              if(s.isDirectory())r=r.concat(collect(q));
              else if(q.toLowerCase().endsWith(".json"))r.push(q)}
          return r}
          const PUB="public";
          let t=[...collect(p.join(PUB,"data","places"))];
          if(fs.existsSync(p.join(PUB,"places.json")))t.push(p.join(PUB,"places.json"));
          console.log(t.sort().join("\n")||"(no targets)");' | tee target-files.txt

      - name: Probe JSON shape (first 10 files)
        run: |
          node -e 'const fs=require("fs");
          function load(p){try{return JSON.parse(fs.readFileSync(p,"utf8"))}catch(e){return null}}
          const files = fs.readFileSync("target-files.txt","utf8").split("\n").filter(Boolean);
          const pick = files.slice(0,10);
          for(const f of pick){
            const js = load(f) || {};
            const keys = Object.keys(js||{});
            let arr = Array.isArray(js) ? js : (js.places || js.items || js.results || js.data || js.entries || []);
            console.log(`[shape] ${f}  keys=${keys.slice(0,8).join(",")}  len=${Array.isArray(arr)?arr.length:"NA"}`);
          }' | tee shape.txt

      - name: Run verifier (verbose)
        run: |
          echo "::group::Run scan.mjs"
          set -o pipefail
          NODE_OPTIONS="--trace-uncaught" VERBOSE=1 node tools/verify/scan.mjs | tee scan.log
          echo "::endgroup::"
          echo "::group::Changed files"
          git status --porcelain || true
          git diff --name-only || true
          echo "::endgroup::"

      # 失敗しても必ずログを残す
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-logs
          path: |
            target-files.txt
            shape.txt
            scan.log
          if-no-files-found: ignore
          retention-days: 7

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bot/verify-update
          commit-message: "chore(verify): auto-update verification labels & evidence"
          title: "Auto: verification update"
          body: |
            Automated verification run.

            - Target file list and shape are attached as artifacts (verify-logs).
            - Please review labels (✅/⚠︎) and metadata under `verification`.
          labels: "verification,bot"
          add-paths: |
            public/**/*.json
