name: scan-and-open-pr

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 18 * * *"  # 毎日 18:00 UTC（日本 03:00）

permissions:
  contents: write
  pull-requests: write

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Run scanner
        run: pnpm run cpm:scan

      - name: Prepare branch if changes exist
        id: diff
        run: |
          CHANGED=$(git status --porcelain)
          if [ -z "$CHANGED" ]; then
            echo "changed=0" >> $GITHUB_OUTPUT
            echo "No changes. Skipping branch/PR."
            exit 0
          fi
          echo "changed=1" >> $GITHUB_OUTPUT
          BR="auto/scan-$(date -u +%Y%m%d)"
          echo "branch=$BR" >> $GITHUB_OUTPUT

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git checkout -b "$BR"
          git add public/data/places tools/verify/last_runs.json tools/verify/.last_summary.json
          git commit -m "chore(scan): nightly verification labels & last_checked update"
          git push -u origin "$BR"

      - name: Open PR (or update body)
        if: steps.diff.outputs.changed == '1'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const sumPath = 'tools/verify/.last_summary.json';
            const summary = fs.existsSync(sumPath) ? JSON.parse(fs.readFileSync(sumPath, 'utf-8')) : null;

            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head = process.env.GITHUB_REF_NAME?.startsWith('auto/scan-') ? process.env.GITHUB_REF_NAME : core.getInput('head') || '${{ steps.diff.outputs.branch }}';
            const base = 'main';
            const title = `chore(scan): nightly verification update (${new Date().toISOString().slice(0,10)})`;

            // find existing open PR from the same head
            const existing = await github.paginate(github.rest.pulls.list, { owner, repo, state: "open", head: `${owner}:${head}` });
            const bodyLines = [];

            if (summary) {
              const s = summary.stats;
              bodyLines.push(`**Scan @ ${summary.timestamp} (rules ${summary.rulesVersion})**`);
              bodyLines.push('');
              bodyLines.push(`- Scanned: **${s.scanned}**, Hits: **${s.hits}**, Updated: **${s.updated}**, Unchanged: **${s.unchanged}**`);
              bodyLines.push(`- Directory → ✅:${s.byStatus.directory.pass} ⚠︎:${s.byStatus.directory.warn} date-only:${s.byStatus.directory.dateOnly}`);
              bodyLines.push(`- Unverified → ✅:${s.byStatus.unverified.pass} ⚠︎:${s.byStatus.unverified.warn} date-only:${s.byStatus.unverified.dateOnly}`);
              const dist = Object.entries(s.evidenceDist).sort((a,b)=>b[1]-a[1]).slice(0,3).map(([k,v])=>`${k}:${v}`).join(", ");
              if (dist) bodyLines.push(`- Evidence top: ${dist}`);
              if (summary.changedFiles?.length) {
                bodyLines.push(`- Changed files: ${summary.changedFiles.length}`);
              }
              const fails = (s.failuresTop||[]).map(f=>`${f.host}(${f.count})`).join(", ");
              if (fails) bodyLines.push(`- Failures top: ${fails}`);
              bodyLines.push('');
              bodyLines.push('> Note: This PR does **not** change `status`. Only adds ✅/⚠︎ label in `name` and updates `last_checked` timestamps.');
            } else {
              bodyLines.push('Nightly scan results.');
            }

            const body = bodyLines.join('\n');

            if (existing.length) {
              await github.rest.pulls.update({ owner, repo, pull_number: existing[0].number, title, body });
              return;
            }

            await github.rest.pulls.create({ owner, repo, title, head, base, body, draft: false });
